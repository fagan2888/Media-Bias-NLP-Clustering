{"article_title": "Why the Obamacare Rollout Was a Disaster", "article_keywords": ["load", "web", "code", "old", "disaster", "obamacare", "system", "project", "systems", "queries", "rollout", "requirements", "software"], "article_url": "https://www.powerlineblog.com/archives/2013/10/why-the-obamacare-rollout-was-a-disaster.php", "article_text": "Software expert Dan Weber, in a comment on Marginal Revolution, offers a cogent technical explanation of the failure of the Obamacare launch:\n\nThe front end technology is not the problem here. It would be nice if it was the problem, because web page scaling issues are known problems and relatively easy to solve.\n\nThe real problems are with the back end of the software. When you try to get a quote for health insurance, the system has to connect to computers at the IRS, the VA, Medicaid/CHIP, various state agencies, Treasury, and HHS. They also have to connect to all the health plan carriers to get pre-subsidy pricing. All of these queries receive data that is then fed into the online calculator to give you a price. If any of these queries fails, the whole transaction fails.\n\nMost of these systems are old legacy systems with their own unique data formats. Some have been around since the 1960\u2032s, and the people who wrote the code that runs on them are long gone. If one of these old crappy systems takes too long to respond, the transaction times out.\n\nAmazingly, none of this was tested until a week or two before the rollout, and the tests failed. They released the web site to the public anyway \u2013 an act which would border on criminal negligence if it was done in the private sector and someone was harmed. Their load tests crashed the system with only 200 simultaneous transactions \u2013 a load that even the worst-written front-end software could easily handle.\n\nWhen you even contemplate bringing an old legacy system into a large-scale web project, you should do load testing on that system as part of the feasibility process before you ever write a line of production code, because if those old servers can\u2019t handle the load, your whole project is dead in the water if you are forced to rely on them. There are no easy fixes for the fact that a 30 year old mainframe can not handle thousands of simultaneous queries. And upgrading all the back-end systems is a bigger job than the web site itself. Some of those systems are still there because attempts to upgrade them failed in the past. Too much legacy software, too many other co-reliant systems, etc. So if they aren\u2019t going to handle the job, you need a completely different design for your public portal.\n\nA lot of focus has been on the front-end code, because that\u2019s the code that we can inspect, and it\u2019s the code that lots of amateur web programmers are familiar with, so everyone\u2019s got an opinion. And sure, it\u2019s horribly written in many places. But in systems like this the problems that keep you up at night are almost always in the back-end integration.\n\nThe root problem was horrific management. The end result is a system built incorrectly and shipped without doing the kind of testing that sound engineering practices call for. These aren\u2019t \u2018mistakes\u2019, they are the result of gross negligence, ignorance, and the violation of engineering best practices at just about every step of the way\u2026\n\n\u2026\u201cNo way would Apple, Amazon, UPS, FedEx outsource their computer systems and software development, or their IT operations, to anyone else.\u201d\n\nYou have to be kidding. How do you think SAP makes a living? Or Oracle? Or PeopleSoft? Or IBM, which has become little more than an IT service provider to other companies?\n\nEveryone outsources large portions of their IT, and they should. It\u2019s called specialization and division of labor. If FedEx\u2019s core competence is not in IT, they should outsource their IT to people who know what they are doing.\n\nIn fact, the failure of Obamacare\u2019s web portal can be more reasonably blamed on the government\u2019s unwillingness to outsource the key piece of the project \u2013 the integration lead. Rather than hiring an outside integration lead and giving them responsibility for delivering on time, for some inexplicable reason the administration decided to make the Center for Medicare and Medicaid services the integration lead for a massive IT project despite the fact that CMS has no experience managing large IT projects.\n\nFailure isn\u2019t rare for government IT projects \u2013 it\u2019s the norm. Over 90% of them fail to deliver on time and on budget. But more frighteningly, over 40% of them fail absolutely and are never delivered. This is because the core requirements for a successful project \u2013 solid up-front analysis and requirements, tight control over requirements changes, and clear coordination of responsibility with accountability, are all things that government tends to be very poor at.\n\nThe mystery is why we keep letting them try.", "article_metadata": {"og": {"site_name": "Power Line", "description": "Software expert Dan Weber, in a comment on Marginal Revolution, offers a cogent technical explanation of the failure of the Obamacare launch: The front end technology is not the problem here. It wo\u2026", "title": "Why the Obamacare Rollout Was a Disaster", "url": "http://on.powerlineblog.com/archives/2013/10/why-the-obamacare-rollout-was-a-disaster.php", "image": "https://www.powerlineblog.com/wp-content/themes/powerline/images/icon.png", "locale": "en_US", "type": "powerlineblog:article"}, "twitter": {"image": "https://www.powerlineblog.com/ed-assets/2013/10/Stuupid08.jpg?w=640", "site": "@powerlineus", "card": "summary_large_image"}, "robots": "NOODP", "wp-parsely_version": "1.7", "fb": {"admins": "505151,john.hinderaker,scottwynnjohnson,750972908", "app_id": 154257474630565}, "article": {"published_time": "2013-10-28T00:23:26+00:00", "modified_time": "2013-10-28T01:50:58+00:00"}, "viewport": "width=device-width"}, "_id": "\"57477af46914bd0286fda300\"", "article_summary": "Amazingly, none of this was tested until a week or two before the rollout, and the tests failed.\nMost of these systems are old legacy systems with their own unique data formats.\nIf one of these old crappy systems takes too long to respond, the transaction times out.\nAll of these queries receive data that is then fed into the online calculator to give you a price.\nTheir load tests crashed the system with only 200 simultaneous transactions \u2013 a load that even the worst-written front-end software could easily handle."}